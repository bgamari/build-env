# build-env

This is a proof-of-concept utility to build a set of Cabal packages (computed
by `cabal-install`'s solver) into a free-standing package database.

## Example

```
$ build-env plan -p plan.json lens
$ build-env fetch -p plan.json -f sources
$ build-env build --prefetched -p plan.json -f sources -o install
$ ls install/package.conf/lens*
install/package.conf/lens-5.2-1bfd85cb66d2330e59a2f957e87cac993d922401.conf
$ ghc-pkg --package-db=install/package.conf field lens id
id: lens-5.2-1bfd85cb66d2330e59a2f957e87cac993d922401
$ ghci -package-db install/package.conf/ -package lens
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Î»> :ty Control.Lens.Lens
Control.Lens.Lens
  :: Control.Lens.Type.Lens s t a b
     -> Control.Lens.Reified.ReifiedLens s t a b
```

In the above example, the `plan` command generates a `plan.json` file, which
is then used by the `fetch` and `build` commands. This allows one to fetch
packages, copy the sources and the `plan.json` file, and build the plan in a
different location.

If you don't need this functionality, you can build the packages using
the `build` command alone:

```
$ build-env build lens -f sources -o install
```

## Specifying packages

Instead of passing the required packages by the command line, `build-env` can
also read them from files:

```
$ build-env build --seeds SEEDS --freeze cabal.config -f sources -o install
```

This will compute a build plan for the packages specified in the `SEEDS` file,
with versions of packages that aren't in the `SEEDS` file constrained as
specified by the `cabal.config` file.

Each line in the seeds file should be one of the following:

  - a package with flags and constraints such as:

    ```
    pkg +flag1 -flag2 >= 0.1 && < 0.3 || == 0.5
    ```

    Flags and constraints are both optional.  
    If they are both present, flags must come before constraints.  
    The constraints must use valid `cabal` constraint syntax.

  - an allow-newer specification such as:

    ```
    allow-newer: pkg1:pkg2,pkg3:base,*:ghc
    ```

    This uses `cabal` `allow-newer` syntax.

  - an empty line or comment (starting with `--`).

The `cabal.config` file should use valid `cabal.project` syntax, e.g.:

```cabal
constraints: pkg1 == 0.1,
             pkg2 >= 3.0
```
